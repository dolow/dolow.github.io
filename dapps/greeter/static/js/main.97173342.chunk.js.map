{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","App","state","greeting","accounts","contract","componentDidMount","networkId","deployedNetwork","instance","sent","eth","getAccounts","net","getId","GreeterContract","networks","Contract","abi","address","_this","setState","runExample","alert","error","_callee2","_this$state","response","_context2","methods","dynamicMessage","call","handleGreetingChange","e","inputVal","target","value","formSubmitHandler","_callee3","_this$state2","_context3","setDynamicMessage","send","from","_this2","this","react_default","createElement","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97173342.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport GreeterContract from \"./contracts/Greeter.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { greeting: '', web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = GreeterContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        GreeterContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\nconsole.log(GreeterContract.abi);\nconsole.log(deployedNetwork);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    const response = await contract.methods.dynamicMessage().call()\n\n    this.setState({ greeting: response });\n  };\n\n  handleGreetingChange = (e) => {\n    const inputVal = e.target.value\n    this.setState({ greeting: inputVal })\n  }\n\n  formSubmitHandler = async () => {\n    const { accounts, contract, greeting } = this.state;\nconsole.log(accounts);\n    const updatedGreeting = await contract.methods.setDynamicMessage(greeting).send({from: accounts[0]});\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Greeter</h1>\n\n        {this.state.greeting}\n\n        <form>\n          <label>\n            New Greeting:\n            <input type=\"text\" value={this.state.greeting} onChange={e => this.handleGreetingChange(e)} />\n          </label>\n        </form>\n\n        <button onClick={this.formSubmitHandler}> Submit </button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}